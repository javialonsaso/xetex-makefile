################################################################################
# Title: PDF LATEX MAKEFILE	                                                   #
# File(s): Makefile                                                            # 
# Description: Simple makefile to configure and build pdf documents using      #
# xelatex engine and biber.                                                    # 
#                                                                              # 
#                                                                              # 
# Notes: Select a build (BLD) and a source (SRC) directories to build to/from  #
# each .tex document found. This makefile imitates SRC tree inside             # 
# BLD/bld_files with files generated by xelatex. BLD/pdf encapsulates symlinks #
# to pdfs generated. This makefile also takes into account bib files to also   #
# be built using biber. Dependencies to other files are found by searching     #
# filenames inside tex file. Tex output is formatted using texfot.             #
#                                                                              # 
#                                                                              # 
# Date: 16/03/2022                                                             # 
# Author: Javier Alonso                                                        # 
# Email: javialonsaso@gmail.com                                                # 
#                                                                              # 
#                                                                              # 
################################################################################


# shell options to abort a pipeline of commands if one of them gives an error
SHELLOPTS:=$(if $(SHELLOPTS),$(SHELLOPTS):)pipefail:errexit

# Select source directory where tex files can be found and choose directory to
# build documents
BLD := build
SRC := src

# space-separated list of tex files from SRC (do not include ./ at the beginning)
IGNORE_TEX := structure.tex

# Arguments passed to texfot to format output of tex command. This helps to
# find errors inside the document easier. Tex output is appended with tab.
TEXFOT_ARGS = --no-interactive --quiet \
			  --stderr \
			  --ignore '^This is XeTeX,'\
			  --ignore '^Output written on'\
			  --ignore 'Please \(re\)run Biber'
FORMAT_OUTPUT_LATEX = awk '$$0="\t"$$0'

# Arguents passed to xelatex itself
# -synctex=12 enables form support and better file compression
XELATEX_ARGS = -synctex=12 

# Absolute paths for BLD and SRC
BLD_ABS := $(shell realpath $(BLD))
SRC_ABS := $(shell realpath $(SRC))

# Directories to put all building files and symlinks to pdfs
BLD_FILES_DIR := $(addsuffix /bld_files/, $(BLD_ABS))
BLD_PDF_DIR := $(addsuffix /pdf/, $(BLD_ABS))

# Find paths to tex files from SRC dir
ROOT_DOCUMENT_NAME := $(shell realpath \
					  --relative-to=$(SRC_ABS) \
					  $(basename $(shell find $(SRC_ABS) -name "*.tex"))\
					  )
ROOT_DOCUMENT_NAME := $(filter-out $(basename $(IGNORE_TEX)),$(ROOT_DOCUMENT_NAME))

# Because we want to add a comma as an argument in a function
comma:=,

# Function to extract filenames written on tex document
# This function searches for filenames and paths for any reference to keep track for
# a particular tex file.
# (1): Path to tex file
# (2): Regex expression to extract filenames
define get_deps
$(addprefix $(SRC_ABS)/, $(shell grep -E '\\' $(SRC_ABS)/$(1).tex \
	| grep -E '^\s*%' --invert-match \
	| grep -E '\{.*\}' --only-matching \
	| tr -d '{}' \
	| sed -e 's/\s*\(.*\S\)/\1/' \
	| grep $(2) \
	| grep --line-regexp -P '[\w\._\-\/]*'))
endef

# Don't confuse these targets for files
.PHONY: all clean debug rerun refreshtexfiles
# Don't remove these middle files, they help make to keep track dependencies
.PRECIOUS: $(BLD_FILES_DIR)/%.tmp $(BLD_FILES_DIR)/%.bbl

# Main target: List of pdfs from each tex file found
ifneq ($(ROOT_DOCUMENT_NAME),)

all: $(addprefix $(BLD_PDF_DIR)/,$(addsuffix .pdf,$(ROOT_DOCUMENT_NAME)))
	@ echo "Compilation completed!"
	@ printf "Documents found in %s\n" \
		"$(shell realpath --relative-to=$(PWD) $(BLD_PDF_DIR))"

refreshtexfiles:
	@ touch $(addprefix $(SRC_ABS)/,$(addsuffix .tex,$(ROOT_DOCUMENT_NAME)))

rerun: refreshtexfiles all


else
all:
	@ echo "Nothing to generate"
endif

# List variables previously defined
debug:
	@ echo "BLD_ABS"
	@ echo $(BLD_ABS)
	@ echo "SRC_ABS"
	@ echo $(SRC_ABS)
	@ echo "BLD_FILES_DIR"
	@ echo $(BLD_FILES_DIR)
	@ echo "BLD_PDF_DIR"
	@ echo $(BLD_PDF_DIR)
	@ echo "ROOT_DOCUMENT_NAME"
	@ echo $(ROOT_DOCUMENT_NAME)
	@ echo "PWD"
	@ echo $(PWD)

# Delete BLD dir, to remake all pdfs from zero
clean:
	@if [ -d $(BLD) ]; then\
		rm -r $(BLD)/;\
	fi

# Just delete files related to bibliography
cleanbib:
	@if [ -d $(BLD) ]; then\
		find $(BLD) -name '*.bbl' -exec rm '{}' \; ;\
	fi

# Define rules for each tex file
define generate_complete_document

# Save dependencies to other files from tex file content
BIB_DEPS_$(1) := $$(call get_deps,$(1),-P '\.bib')
OTHER_DEPS_$(1) := $$(call get_deps,$(1),-P '\.((?!bib|/).){2$$(comma)4}')

# Create symlink in BLD/pdf/ dir
$$(BLD_PDF_DIR)/$(1).pdf: $$(BLD_FILES_DIR)/$(1).pdf
	@ mkdir -p $$(dir $$@)
	@ ln -fsr $$< $$@
	@ echo "$(1).pdf is built!"
	@ echo

# Check if there is a dependency to bib files,
# If there is add a rule for .bbl files
ifneq ($$(BIB_DEPS_$(1)),)
$$(BLD_FILES_DIR)/$(1).pdf: $$(BLD_FILES_DIR)/$(1).tmp \
							$$(BLD_FILES_DIR)/$(1).bbl \
							$$(OTHER_DEPS_$(1));
else
$$(BLD_FILES_DIR)/$(1).pdf: $$(BLD_FILES_DIR)/$(1).tmp \
							$$(OTHER_DEPS_$(1));
endif

# Create pdf document before attempting to add bib info
$$(BLD_FILES_DIR)/$(1).tmp: $$(SRC_ABS)/$(1).tex $$(OTHER_DEPS_$(1))
	@ echo "Building $(1).pdf ..."

	@ mkdir -p $$(dir $$@)
	@ # Call xelatex to generate pdf
	@ cd $$(SRC_ABS); texfot $$(TEXFOT_ARGS) xelatex $$(XELATEX_ARGS) -output-directory="$$(dir $$@)" $$< | $$(FORMAT_OUTPUT_LATEX)

	@ # Include temp file to keep track of changes
	@ echo "This file is an intermediate file for makefile to know when compile bibliography." > $$@
	@ echo "DO NOT MODIFY THIS FILE" >> $$@

	@ echo "Document precompiled"


# If there is bib info to be added, call biber and then compile pdf file twice
ifneq ($$(BIB_DEPS_$(1)),)
$$(BLD_FILES_DIR)/$(1).bbl: $$(BIB_DEPS_$(1))
	@ # The following command prints ERROR when the tex file couldnt have been created.
	@ cd $$(SRC_ABS); biber --quiet --output-directory $$(dir $$@) $$(notdir $(1))
	@ cd $$(SRC_ABS); xelatex $$(XELATEX_ARGS) -output-directory="$$(dir $$@)" $(1).tex 1>/dev/null
	@ cd $$(SRC_ABS); xelatex $$(XELATEX_ARGS) -output-directory="$$(dir $$@)" $(1).tex 1>/dev/null

	@ echo "Document with bib compiled"
endif

endef

# Call function to generate rules for each tex in ROOT_DOCUMENT_NAME
$(foreach document,\
	$(ROOT_DOCUMENT_NAME),\
	$(eval $(call generate_complete_document,$(document))))
